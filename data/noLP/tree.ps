%!PS-Adobe-2.0 EPSF-1.2
%%Title: TreePlot
%%Creator: treeplot.c
%%CreationDate: Tue Oct 24 14:57:09 2017
%%BoundingBox: 72 144 522 700
%%EndComments
%%BeginProlog
/treedict 100 dict def
treedict begin
% x y  => min(x,y)
  /min { 2 copy gt { exch } if pop } bind def
  /max { 2 copy lt { exch } if pop } bind def
  /cmtx matrix currentmatrix def
  /STR 128 string def
  /NumH 1 def
% - => -
  /Init {
    /LX [
      LEAF {0 get} forall
    ] def

    /Helvetica findfont fsize scalefont setfont
    /Lo [
      (X) stringwidth pop % width
      newpath 0 0 moveto
      (X) true charpath
      flattenpath pathbbox
      pop exch pop exch sub neg 2 div % height
     ] def
  } def
% - => -
  /DrawScale {
  gsave 
    maxy miny sub 30 div dup maxy add /maxy exch def miny sub /miny def
    maxy miny sub log 0.9 sub floor 10 exch exp /tick exch def
    newpath
    LEAF length 0.5 sub 0 translate 0 miny moveto 0 maxy miny sub rlineto
    miny tick div ceiling tick mul dup 0 exch moveto 
    maxy exch sub tick div cvi 1 add dup { % draw minor ticks
      0.15 0 rlineto
      -0.15 tick rmoveto
    } repeat
    % calculate major tick spacing (10, 5, or 2 minor ticks)
    dup 69 gt { pop 10
    } {
      32 gt { 5 }
      {2} ifelse
    } ifelse
    tick mul /mtick exch def
    miny mtick div ceiling mtick mul dup 0 exch moveto
    maxy exch sub mtick div cvi 1 add {
      0.3 0 rlineto 
      gsave currentpoint 10 mul round 10 div cmtx setmatrix
      STR cvs dup stringwidth pop
      Lo aload pop 3 1 roll add neg exch rmoveto show pop
      grestore
      -0.3 mtick rmoveto
    } repeat
    cmtx setmatrix stroke    
  grestore
  } def
% - => -
  /SetBarFont {
    matrix currentmatrix cmtx setmatrix
    /Helvetica findfont fbsize scalefont setfont
    setmatrix
  } bind def
% - => -
  /SetLabelFont {
    matrix currentmatrix cmtx setmatrix
    /Courier findfont fsize scalefont setfont
    setmatrix
  } bind def
% str => -
  /Rotshow {
    gsave
      dup type () type eq
      { 1 0 0 setrgbcolor }
      { STR cvs }ifelse
      cmtx setmatrix -90 rotate
      Lo aload pop
      rmoveto show
    grestore
  } def
% dy => - 
  /Rlineto {
    dup abs MinHeight ge { % draw height at middle of line
      dup gsave
	dup 2 div 0 exch rmoveto
	cmtx setmatrix -90 rotate
	abs STR cvs dup stringwidth pop 2 div neg
	//NumH rmoveto
	show
      grestore
    } if
    0 exch rlineto
  } def
% - => -
  /Drawlabels {
   0 LEAF {
      aload pop moveto
      dup LABEL exch get Rotshow
      1 add
    } forall pop
  } def
% n => n'    Detect whether a minimum is connected
  /MRX {
     /murxi { true } def
     dup 0 lt { pop 0 /murxi { false } def } if
  } def
% - => -
  /Connectlmins {
    newpath
    SADDEL {
      /forest {false} def  %  draw as tree or forest node
      aload pop exch dup 0 lt { pop 0 /forest {true} def} if   % => c h f
      dup LX exch get [ exch LX 5 index get add 2 div % => c h f [ nx
      3 index ]				         % => c h f [ nx h ]
      3 -1 roll dup LEAF 6 -1 roll get aload pop % => f [nx h] h h cx cy
      dup 3 1 roll moveto		         % => f [] h h cy
      sub Rlineto                                % => f [] h
      LEAF 3 index get aload pop exch		 % => f [] h fy fx
      2 index forest {moveto} {lineto} ifelse 
      sub neg Rlineto			         % => f [] h fy
      LEAF 3 1 roll put
    } forall
    gsave
      cmtx setmatrix stroke
    grestore
  } def
% data starts here!!!
  /LABEL [
   (1)   2   3   4   5   6   7   8   9  10 
    11  12  13  14  15  16  17  18  19  20 
   (21)  22  23  24  25  26  27 (28)  29 (30) 
    31  32  33  34  35 (36)  37  38  39 
  ] def
% leaf node coordinates
  /LEAF [
   [0    -7.200] [5    -7.200] [10   -6.800] [11   -4.500] [7    -4.300] 
   [6    -3.900] [12   -2.900] [13   -2.800] [8    -1.300] [15   -0.800] 
   [14   -0.800] [16   -0.600] [17    0.200] [9     0.500] [19    0.900] 
   [20    1.600] [21    1.900] [18    1.900] [22    2.100] [24    2.300] 
   [1     2.500] [28    2.500] [26    2.700] [23    2.800] [27    2.800] 
   [30    3.000] [25    3.100] [2     3.200] [29    3.200] [3     3.400] 
   [32    3.400] [31    3.800] [35    4.200] [33    4.300] [36    4.900] 
   [4     4.900] [34    4.900] [37    5.800] [38    6.400]   
] def
% internal nodes (saddle) coordinates, sorted by height
  /SADDEL [
   [  5   1  -3.700] [  3   2  -3.000] [  4   1  -2.200] [  6   2  -1.500] 
   [  7   2  -1.200] [ 10   2   0.500] [  9   2   0.800] [ 11   2   0.800] 
   [  8   1   0.900] [ 13   1   0.900] [  2   1   1.600] [ 12   1   1.900] 
   [ 17   1   2.000] [ 14   1   2.100] [ 15   1   2.300] [ 16   1   2.700] 
   [ 18   1   2.800] [ 23   1   2.900] [ 19   1   3.000] [ 26   1   3.300] 
   [ 22   1   3.500] [ 24   1   3.500] [ 21   1   3.900] [ 20   0   3.900] 
   [ 28   1   3.900] [ 27   0   3.900] [ 25   1   4.000] [ 31   1   4.000] 
   [ 30   1   4.400] [ 29   0   4.400] [ 33   1   4.800] [ 36   1   5.600] 
   [ 35   0   5.600] [ 32   1   5.800] [ 34   1   5.800] [ 37   1   6.500] 
   [ 38   1   7.100] [  1  -1  20.801] [  0  -1  20.801]   
] def
end
%%EndProlog
treedict begin
  /fsize 10 def
  /fbsize 7 def
  Init
  521 144 fsize 1.5 mul add translate
  72 521 sub LEAF length div % x-scale
  699 144 fsize dup add add sub
  SADDEL dup length 1 sub get 2 get /maxy exch def % max height
  9999999 LEAF { aload pop exch pop min } forall
  /miny exch def % min height
  maxy miny sub dup 20 div /MinHeight exch def
  div scale
  .5 LEAF 0 get 1 get neg translate
  SetLabelFont
  Drawlabels
  DrawScale
  SetBarFont
  Connectlmins
  showpage
end
%%EOF
