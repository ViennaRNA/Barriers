%!PS-Adobe-2.0 EPSF-1.2
%%Title: TreePlot
%%Creator: treeplot.c
%%CreationDate: Mon Jul 24 16:36:25 2006
%%BoundingBox: 72 144 522 700
%%EndComments
%%BeginProlog
/treedict 100 dict def
treedict begin
% x y  => min(x,y)
  /min { 2 copy gt { exch } if pop } bind def
  /max { 2 copy lt { exch } if pop } bind def
  /cmtx matrix currentmatrix def
  /STR 128 string def
  /NumH 1 def
% - => -
  /Init {
    /LX [
      LEAF {0 get} forall
    ] def

    /Helvetica findfont fsize scalefont setfont
    /Lo [
      (X) stringwidth pop % width
      newpath 0 0 moveto
      (X) true charpath
      flattenpath pathbbox
      pop exch pop exch sub neg 2 div % height
     ] def
  } def
% - => -
  /DrawScale {
  gsave 
    maxy miny sub 30 div dup maxy add /maxy exch def miny sub /miny def
    maxy miny sub log 0.9 sub floor 10 exch exp /tick exch def
    newpath
    LEAF length 0.5 sub 0 translate 0 miny moveto 0 maxy miny sub rlineto
    miny tick div ceiling tick mul dup 0 exch moveto 
    maxy exch sub tick div cvi 1 add dup { % draw minor ticks
      0.15 0 rlineto
      -0.15 tick rmoveto
    } repeat
    % calculate major tick spacing (10, 5, or 2 minor ticks)
    dup 69 gt { pop 10
    } {
      32 gt { 5 }
      {2} ifelse
    } ifelse
    tick mul /mtick exch def
    miny mtick div ceiling mtick mul dup 0 exch moveto
    maxy exch sub mtick div cvi 1 add {
      0.3 0 rlineto 
      gsave currentpoint 10 mul round 10 div cmtx setmatrix
      STR cvs dup stringwidth pop
      Lo aload pop 3 1 roll add neg exch rmoveto show pop
      grestore
      -0.3 mtick rmoveto
    } repeat
    cmtx setmatrix stroke    
  grestore
  } def
% - => -
  /SetBarFont {
    matrix currentmatrix cmtx setmatrix
    /Helvetica findfont fbsize scalefont setfont
    setmatrix
  } bind def
% - => -
  /SetLabelFont {
    matrix currentmatrix cmtx setmatrix
    /Courier findfont fsize scalefont setfont
    setmatrix
  } bind def
% str => -
  /Rotshow {
    gsave
      cmtx setmatrix -90 rotate
      Lo aload pop
      rmoveto show
    grestore
  } def
% dy => - 
  /Rlineto {
    dup abs MinHeight ge { % draw height at middle of line
      dup gsave
	dup 2 div 0 exch rmoveto
	cmtx setmatrix -90 rotate
	abs STR cvs dup stringwidth pop 2 div neg
	//NumH rmoveto
	show
      grestore
    } if
    0 exch rlineto
  } def
% - => -
  /Drawlabels {
   0 LEAF {
      aload pop moveto
      dup LABEL exch get STR cvs Rotshow
      1 add
    } forall pop
  } def
% n => n'    Detect whether a minimum is connected
  /MRX {
     /murxi { true } def
     dup 0 lt { pop 0 /murxi { false } def } if
  } def
% - => -
  /Connectlmins {
    newpath
    SADDEL {
      /forest {false} def  %  draw as tree or forest node
      aload pop exch dup 0 lt { pop 0 /forest {true} def} if   % => c h f
      dup LX exch get [ exch LX 5 index get add 2 div % => c h f [ nx
      3 index ]				         % => c h f [ nx h ]
      3 -1 roll dup LEAF 6 -1 roll get aload pop % => f [nx h] h h cx cy
      dup 3 1 roll moveto		         % => f [] h h cy
      sub Rlineto                                % => f [] h
      LEAF 3 index get aload pop exch		 % => f [] h fy fx
      2 index forest {moveto} {lineto} ifelse 
      sub neg Rlineto			         % => f [] h fy
      LEAF 3 1 roll put
    } forall
    gsave
      cmtx setmatrix stroke
    grestore
  } def
% data starts here!!!
  /LABEL [
   (1 *) (2 *) (3 *) (4 *) (5 *) (6 *) (7 *) (8 *)   9  10 
    11  12 (13 *) (14 *)  15  16  17  18  19  20 
    21  22  23  24  25  26  27  28  29  30 
    31  32  33  34  35  36  37  38  39  40 
    41  42 
  ] def
% leaf node coordinates
  /LEAF [
   [0    -2.967] [3    -2.967] [1    -2.700] [4    -2.700] [2    -2.567] 
   [5    -2.567] [11   -2.100] [10   -2.100] [7    -1.967] [6    -1.967] 
   [15   -1.900] [14   -1.900] [33   -1.900] [32   -1.900] [9    -1.833] 
   [8    -1.833] [22   -1.700] [23   -1.700] [13   -1.700] [12   -1.700] 
   [20   -1.700] [21   -1.700] [25   -1.567] [24   -1.567] [29   -1.500] 
   [28   -1.500] [27   -1.500] [26   -1.500] [41   -1.433] [40   -1.433] 
   [35   -1.433] [34   -1.433] [31   -1.367] [30   -1.367] [39   -1.300] 
   [38   -1.300] [37   -1.300] [36   -1.300] [19   -1.233] [18   -1.233] 
   [17   -1.233] [16   -1.233]   
] def
% internal nodes (saddle) coordinates, sorted by height
  /SADDEL [
   [  3   1  -2.233] [  2   0  -2.233] [  5   1  -2.233] [  4   0  -2.233] 
   [  1   0  -1.633] [  9   0  -1.633] [  8   0  -1.633] [ 15   0  -1.500] 
   [ 14   0  -1.500] [  7   0  -1.367] [  6   0  -1.367] [ 21  20  -1.233] 
   [ 19   0  -1.233] [ 18   0  -1.233] [ 17  16  -1.233] [ 11   0  -1.167] 
   [ 10   0  -1.167] [ 41   0  -1.167] [ 40   0  -1.167] [ 39   0  -1.167] 
   [ 38   0  -1.167] [ 20   0  -1.100] [ 16   0  -1.100] [ 23   0  -1.100] 
   [ 22   0  -1.100] [ 27   0  -0.900] [ 26   0  -0.900] [ 25   0  -0.900] 
   [ 24   0  -0.900] [ 33   0  -0.900] [ 32   0  -0.900] [ 13   0  -0.833] 
   [ 12   0  -0.833] [ 31   0  -0.700] [ 30   0  -0.700] [ 37   0  -0.700] 
   [ 36   0  -0.700] [ 35   0  -0.700] [ 34   0  -0.700] [  0  -1  -0.099] 
   [ 29  -1  -0.099] [ 28  -1  -0.099]   
] def
end
%%EndProlog
treedict begin
  /fsize 10 def
  /fbsize 7 def
  Init
  521 144 fsize 1.5 mul add translate
  72 521 sub LEAF length div % x-scale
  699 144 fsize dup add add sub
  SADDEL dup length 1 sub get 2 get /maxy exch def % max height
  9999999 LEAF { aload pop exch pop min } forall
  /miny exch def % min height
  maxy miny sub dup 20 div /MinHeight exch def
  div scale
  .5 LEAF 0 get 1 get neg translate
  SetLabelFont
  Drawlabels
  DrawScale
  SetBarFont
  Connectlmins
  showpage
end
%%EOF
